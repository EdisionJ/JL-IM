// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"IM/db/model"
)

func newFriendReq(db *gorm.DB, opts ...gen.DOOption) friendReq {
	_friendReq := friendReq{}

	_friendReq.friendReqDo.UseDB(db, opts...)
	_friendReq.friendReqDo.UseModel(&model.FriendReq{})

	tableName := _friendReq.friendReqDo.TableName()
	_friendReq.ALL = field.NewAsterisk(tableName)
	_friendReq.UID = field.NewInt64(tableName, "uid")
	_friendReq.FriendID = field.NewInt64(tableName, "friend_id")
	_friendReq.Msg = field.NewString(tableName, "msg")
	_friendReq.IsAgree = field.NewInt32(tableName, "is_agree")
	_friendReq.CreatAt = field.NewTime(tableName, "creat_at")
	_friendReq.UpdateAt = field.NewTime(tableName, "update_at")

	_friendReq.fillFieldMap()

	return _friendReq
}

type friendReq struct {
	friendReqDo friendReqDo

	ALL      field.Asterisk
	UID      field.Int64
	FriendID field.Int64
	Msg      field.String
	IsAgree  field.Int32 // -1：拒绝 0：未处理 1：同意
	CreatAt  field.Time
	UpdateAt field.Time

	fieldMap map[string]field.Expr
}

func (f friendReq) Table(newTableName string) *friendReq {
	f.friendReqDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f friendReq) As(alias string) *friendReq {
	f.friendReqDo.DO = *(f.friendReqDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *friendReq) updateTableName(table string) *friendReq {
	f.ALL = field.NewAsterisk(table)
	f.UID = field.NewInt64(table, "uid")
	f.FriendID = field.NewInt64(table, "friend_id")
	f.Msg = field.NewString(table, "msg")
	f.IsAgree = field.NewInt32(table, "is_agree")
	f.CreatAt = field.NewTime(table, "creat_at")
	f.UpdateAt = field.NewTime(table, "update_at")

	f.fillFieldMap()

	return f
}

func (f *friendReq) WithContext(ctx context.Context) IFriendReqDo {
	return f.friendReqDo.WithContext(ctx)
}

func (f friendReq) TableName() string { return f.friendReqDo.TableName() }

func (f friendReq) Alias() string { return f.friendReqDo.Alias() }

func (f friendReq) Columns(cols ...field.Expr) gen.Columns { return f.friendReqDo.Columns(cols...) }

func (f *friendReq) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *friendReq) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["uid"] = f.UID
	f.fieldMap["friend_id"] = f.FriendID
	f.fieldMap["msg"] = f.Msg
	f.fieldMap["is_agree"] = f.IsAgree
	f.fieldMap["creat_at"] = f.CreatAt
	f.fieldMap["update_at"] = f.UpdateAt
}

func (f friendReq) clone(db *gorm.DB) friendReq {
	f.friendReqDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f friendReq) replaceDB(db *gorm.DB) friendReq {
	f.friendReqDo.ReplaceDB(db)
	return f
}

type friendReqDo struct{ gen.DO }

type IFriendReqDo interface {
	gen.SubQuery
	Debug() IFriendReqDo
	WithContext(ctx context.Context) IFriendReqDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFriendReqDo
	WriteDB() IFriendReqDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFriendReqDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFriendReqDo
	Not(conds ...gen.Condition) IFriendReqDo
	Or(conds ...gen.Condition) IFriendReqDo
	Select(conds ...field.Expr) IFriendReqDo
	Where(conds ...gen.Condition) IFriendReqDo
	Order(conds ...field.Expr) IFriendReqDo
	Distinct(cols ...field.Expr) IFriendReqDo
	Omit(cols ...field.Expr) IFriendReqDo
	Join(table schema.Tabler, on ...field.Expr) IFriendReqDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFriendReqDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFriendReqDo
	Group(cols ...field.Expr) IFriendReqDo
	Having(conds ...gen.Condition) IFriendReqDo
	Limit(limit int) IFriendReqDo
	Offset(offset int) IFriendReqDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFriendReqDo
	Unscoped() IFriendReqDo
	Create(values ...*model.FriendReq) error
	CreateInBatches(values []*model.FriendReq, batchSize int) error
	Save(values ...*model.FriendReq) error
	First() (*model.FriendReq, error)
	Take() (*model.FriendReq, error)
	Last() (*model.FriendReq, error)
	Find() ([]*model.FriendReq, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FriendReq, err error)
	FindInBatches(result *[]*model.FriendReq, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FriendReq) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFriendReqDo
	Assign(attrs ...field.AssignExpr) IFriendReqDo
	Joins(fields ...field.RelationField) IFriendReqDo
	Preload(fields ...field.RelationField) IFriendReqDo
	FirstOrInit() (*model.FriendReq, error)
	FirstOrCreate() (*model.FriendReq, error)
	FindByPage(offset int, limit int) (result []*model.FriendReq, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFriendReqDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f friendReqDo) Debug() IFriendReqDo {
	return f.withDO(f.DO.Debug())
}

func (f friendReqDo) WithContext(ctx context.Context) IFriendReqDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f friendReqDo) ReadDB() IFriendReqDo {
	return f.Clauses(dbresolver.Read)
}

func (f friendReqDo) WriteDB() IFriendReqDo {
	return f.Clauses(dbresolver.Write)
}

func (f friendReqDo) Session(config *gorm.Session) IFriendReqDo {
	return f.withDO(f.DO.Session(config))
}

func (f friendReqDo) Clauses(conds ...clause.Expression) IFriendReqDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f friendReqDo) Returning(value interface{}, columns ...string) IFriendReqDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f friendReqDo) Not(conds ...gen.Condition) IFriendReqDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f friendReqDo) Or(conds ...gen.Condition) IFriendReqDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f friendReqDo) Select(conds ...field.Expr) IFriendReqDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f friendReqDo) Where(conds ...gen.Condition) IFriendReqDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f friendReqDo) Order(conds ...field.Expr) IFriendReqDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f friendReqDo) Distinct(cols ...field.Expr) IFriendReqDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f friendReqDo) Omit(cols ...field.Expr) IFriendReqDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f friendReqDo) Join(table schema.Tabler, on ...field.Expr) IFriendReqDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f friendReqDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFriendReqDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f friendReqDo) RightJoin(table schema.Tabler, on ...field.Expr) IFriendReqDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f friendReqDo) Group(cols ...field.Expr) IFriendReqDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f friendReqDo) Having(conds ...gen.Condition) IFriendReqDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f friendReqDo) Limit(limit int) IFriendReqDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f friendReqDo) Offset(offset int) IFriendReqDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f friendReqDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFriendReqDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f friendReqDo) Unscoped() IFriendReqDo {
	return f.withDO(f.DO.Unscoped())
}

func (f friendReqDo) Create(values ...*model.FriendReq) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f friendReqDo) CreateInBatches(values []*model.FriendReq, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f friendReqDo) Save(values ...*model.FriendReq) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f friendReqDo) First() (*model.FriendReq, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendReq), nil
	}
}

func (f friendReqDo) Take() (*model.FriendReq, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendReq), nil
	}
}

func (f friendReqDo) Last() (*model.FriendReq, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendReq), nil
	}
}

func (f friendReqDo) Find() ([]*model.FriendReq, error) {
	result, err := f.DO.Find()
	return result.([]*model.FriendReq), err
}

func (f friendReqDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FriendReq, err error) {
	buf := make([]*model.FriendReq, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f friendReqDo) FindInBatches(result *[]*model.FriendReq, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f friendReqDo) Attrs(attrs ...field.AssignExpr) IFriendReqDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f friendReqDo) Assign(attrs ...field.AssignExpr) IFriendReqDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f friendReqDo) Joins(fields ...field.RelationField) IFriendReqDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f friendReqDo) Preload(fields ...field.RelationField) IFriendReqDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f friendReqDo) FirstOrInit() (*model.FriendReq, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendReq), nil
	}
}

func (f friendReqDo) FirstOrCreate() (*model.FriendReq, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendReq), nil
	}
}

func (f friendReqDo) FindByPage(offset int, limit int) (result []*model.FriendReq, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f friendReqDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f friendReqDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f friendReqDo) Delete(models ...*model.FriendReq) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *friendReqDo) withDO(do gen.Dao) *friendReqDo {
	f.DO = *do.(*gen.DO)
	return f
}
